from collections import deque

def water_jug_bfs(a_cap, b_cap, goal):
    visited, parent = set(), {}
    queue = deque([(0, 0)])
    visited.add((0, 0))

    while queue:
        a, b = queue.popleft()
        if a == goal or b == goal:
            path = []
            while (a, b) in parent:
                path.append((a, b))
                a, b = parent[(a, b)]
            return [(0, 0)] + path[::-1]

        for state in {
            (a_cap, b), (a, b_cap), (0, b), (a, 0),
            (a - min(a, b_cap - b), b + min(a, b_cap - b)),
            (a + min(b, a_cap - a), b - min(b, a_cap - a))
        }:
            if state not in visited:
                visited.add(state)
                parent[state] = (a, b)
                queue.append(state)
    return None

# Run
solution = water_jug_bfs(4, 3, 2)
if solution:
    print("Steps to reach the goal:")
    for a, b in solution:
        print(f"Jug A: {a}L, Jug B: {b}L")
else:
    print("No solution found.")
